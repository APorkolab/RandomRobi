name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Backend Quality & Security Checks
  backend-quality:
    name: Backend Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        run: |
          cd backend
          npm i

      - name: Lint backend code
        run: |
          cd backend
          npm run lint

      - name: Security audit backend
        run: |
          cd backend
          npm audit --audit-level moderate
        continue-on-error: true

  # Frontend Quality & Security Checks  
  frontend-quality:
    name: Frontend Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm i

      - name: Security audit frontend
        run: |
          cd frontend
          npm audit --audit-level moderate
        continue-on-error: true

  # Backend Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpassword
          MYSQL_DATABASE: randomrobi_test
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpassword
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: |
          cd backend
          npm i

      - name: Wait for MySQL
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h127.0.0.1 -P3306 -utestuser -ptestpassword --silent; then
              break
            fi
            sleep 1
          done

      - name: Setup test database
        run: |
          cd backend
          npm run test:setup
        env:
          NODE_ENV: test
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: randomrobi_test
          DB_USER: testuser
          DB_PASSWORD: testpassword
          JWT_SECRET: test-jwt-secret-key-for-github-actions-minimum-32-chars
          ADMIN_USERNAME: admin
          ADMIN_EMAIL: admin@randomrobi.com
          ADMIN_PASSWORD: AdminPass123!

      - name: Run tests
        run: |
          cd backend
          npm run test
        env:
          NODE_ENV: test
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: randomrobi_test
          DB_USER: testuser
          DB_PASSWORD: testpassword
          JWT_SECRET: test-jwt-secret-key-for-github-actions-minimum-32-chars
          ADMIN_USERNAME: admin
          ADMIN_EMAIL: admin@randomrobi.com
          ADMIN_PASSWORD: AdminPass123!
          
      - name: Generate coverage report
        run: |
          cd backend
          npm run test:coverage
        continue-on-error: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
        continue-on-error: true

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm i

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Run unit tests
        run: |
          cd frontend
          npm run test -- --watch=false --browsers=ChromeHeadless
        continue-on-error: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
        continue-on-error: true

  # Build Docker Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [backend-quality, frontend-quality, backend-tests, frontend-tests]
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for backend
        id: backend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-

      - name: Extract metadata for frontend
        id: frontend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.backend-meta.outputs.tags }}
          labels: ${{ steps.backend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.frontend-meta.outputs.tags }}
          labels: ${{ steps.frontend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run basic integration tests
        run: |
          echo "Integration tests would run here"
          echo "Currently skipped due to external service dependencies"

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # This could be deploying to a staging server, updating k8s manifests, etc.

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # This could be deploying to your production server, updating k8s manifests, etc.

  # Notification
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
      - name: Notify success
        if: ${{ needs.deploy-production.result == 'success' }}
        run: |
          echo "✅ Deployment successful!"
          # Add notification logic (Slack, email, etc.)
          
      - name: Notify failure
        if: ${{ needs.deploy-production.result == 'failure' }}
        run: |
          echo "❌ Deployment failed!"
          # Add notification logic (Slack, email, etc.)
